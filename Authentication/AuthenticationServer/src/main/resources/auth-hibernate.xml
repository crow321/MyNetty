<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns="http://www.springframework.org/schema/beans"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!-- 加载properties 配置文件-->
    <context:property-placeholder location="classpath:hibernate-config.properties"/>

    <!-- 阿里巴巴 druid数据库连接池 -->
    <bean name="druidDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init"
          destroy-method="close">
        <!--基本属性-->
        <property name="url" value="${hibernate.connection.url}"/>
        <property name="username" value="${hibernate.connection.username}"/>
        <property name="password" value="${hibernate.connection.password}"/>

        <!--配置初始化并发连接数大小、最小、最大-->
        <property name="initialSize" value="10"/>
        <property name="minIdle" value="1"/>
        <property name="maxActive" value="50"/>

        <!-- 配置获取连接等待超时时间-->
        <property name="maxWait" value="3000"/>

        <!--配置检测间隔，检测需要关闭的空闲连接，单位毫秒-->
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>

        <!-- 配置一个连接在池中最小生成的时间，单位毫秒-->
        <property name="minEvictableIdleTimeMillis" value="300000"/>
        <property name="validationQuery" value="SELECT 'x'"/>
        <property name="testWhileIdle" value="true"/>
        <property name="testOnBorrow" value="false"/>
        <property name="testOnReturn" value="false"/>

        <!-- 打开PSCache, 并指定每个连接上PSCache的大小-->
        <property name="poolPreparedStatements" value="true"/>
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20"/>

        <!-- 配置监控统计拦截的filters,去掉后监控页面sql无法统计-->
        <property name="filters" value="stat"/>
    </bean>

    <!-- sessionFactory 配置 -->
    <bean name="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
        <property name="dataSource" ref="druidDataSource"/>
        <property name="hibernateProperties">
            <props>
                <!--<prop key="hibernate.dialect">${hibernate.dialect}</prop>-->
                <!--<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>-->
                <!--<prop key="hibernate.format_sql">${hibernate.format_sql}</prop>-->
                <!--<prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>-->
            </props>
        </property>
        <property name="packagesToScan">
            <list>
                <value>cn.qtec.qkcl.access.auth.server.entity</value>
            </list>
        </property>
    </bean>

    <!-- 配置事务管理 -->
    <bean id="transactionManager" class="org.springframework.orm.hibernate5.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>

    <!-- 使用 AOP 代理 处理事务-->
    <tx:advice id="txAdvice">
        <tx:attributes>
            <tx:method name="insert" propagation="REQUIRED" rollback-for="*Exception"/>
            <tx:method name="deleteAuthenticationInfoByDeviceId" propagation="REQUIRED" rollback-for="*Exception"/>
            <tx:method name="getAuthRespInfoByDeviceID" read-only="true"/>
            <tx:method name="queryRootKeyByRootKeyID" read-only="true"/>
            <tx:method name="queryPasswordByDeviceID" read-only="true"/>
            <tx:method name="queryUserIDAndUserTypeByUsername" read-only="true"/>
        </tx:attributes>
    </tx:advice>
    <aop:config proxy-target-class="true">
        <aop:pointcut id="pointcut" expression="execution(* cn.qtec.qkcl.access.auth.server.dao.*.*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="pointcut"/>
    </aop:config>
</beans>